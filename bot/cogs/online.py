import discord
import sys
import logging

from helpers import team_channel, role_filter
from discord.ext import commands
from sqlalchemy.dialects.postgresql import insert
from database.models import session_creator
from database.models import Online as Online_Table
from datetime import datetime
from sqlalchemy.exc import IntegrityError


class Online(commands.Cog, name="Online"):
    """ A cog that monitors status change events and uses these to check
        if a user has been online on discord in the past day

    """

    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        # Checks if a user's status changed, meaning they used discord in some way today
        if (
                not after.bot
                and role_filter.check_roles(after)
                and str(before.status) != str(after.status)
        ):
            logging.info(f"{after.name} has gone {after.status.name}.")

            try:
                # Try to insert the fact that the user is online. Date is autogenerated when this is run,
                # so is the primary key. There is a unique constraint on userid + date, so it won't let
                # this happen twice. Doesn't matter though, so we just let the error happen.
                session = (
                    session_creator()
                )  # Might need to optimize sessions more later, this isn't that efficient
                session.add(Online_Table(discord_user_id=after.id, online=True))
                session.commit()
                session.close()
            except IntegrityError:
                logging.info(f"{after.name} changed state but was already logged, skipping.")


def setup(bot):
    bot.add_cog(Online(bot))
